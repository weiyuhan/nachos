diff --git a/filesys/directory.cc b/filesys/directory.cc
index 7206432..023700c 100644
--- a/filesys/directory.cc
+++ b/filesys/directory.cc
@@ -58,6 +58,14 @@ char* getNameFromDictorySector(int sector)
 char*
 DirectoryEntry::getName(int fatherSector = 0)
 {
+    char* name = new char[nameSize+1];
+    OpenFile *filenameFile = new OpenFile(2);
+    filenameFile->Seek(nameIndex);
+    filenameFile->Read(name, nameSize);
+    delete filenameFile;
+    name[nameSize] = '\0';
+
+
     if(fatherSector > 0)
     {
         char* fatherName = getNameFromDictorySector(fatherSector);
@@ -65,12 +73,30 @@ DirectoryEntry::getName(int fatherSector = 0)
         strcpy(_ret, fatherName);
         strcat(_ret, name);
         delete [] fatherName;
+        delete [] name;
         return _ret;
     }
     else
         return name;
 }
 
+void 
+DirectoryEntry::setName(char* name)
+{
+    nameSize = strlen(name);
+    FileHeader* filenameHdr = new FileHeader();
+    filenameHdr->FetchFrom(2); 
+    OpenFile *filenameFile = new OpenFile(2);
+    nameIndex = filenameHdr->FileLength();
+
+    filenameFile->Seek(nameIndex);
+    filenameFile->Write(name, nameSize);
+
+    delete filenameHdr;
+    delete filenameFile;
+
+}
+
 
 //----------------------------------------------------------------------
 // Directory::Directory
@@ -150,7 +176,7 @@ int
 Directory::FindIndex(char *name)
 {
     for (int i = 0; i < tableSize; i++)
-        if (table[i].inUse && !strncmp(table[i].name, name, FileNameMaxLen))
+        if (table[i].inUse && !strncmp(table[i].getName(), name, FileNameMaxLen))
 	    return i;
     return -1;		// name not in directory
 }
@@ -184,7 +210,6 @@ Directory::Find(char *name, char *path = "/")
         while(*end != '/')
         {
             end++;
-            length++;
         }
         char* begin = path;
         begin++;
@@ -237,8 +262,13 @@ Directory::Add(char *name, int newSector, bool isDirectory = FALSE, char* path =
             {
                 table[i].inUse = TRUE;
                 table[i].isDirectory = isDirectory;
-                strncpy(table[i].name, name, FileNameMaxLen); 
+                table[i].setName(name); 
                 table[i].sector = newSector;
+
+                FileHeader* filenameHdr = new FileHeader();
+                filenameHdr->FetchFrom(2); 
+                filenameHdr->Print();
+                delete filenameHdr;
  
                 if(isDirectory)
                 {
@@ -251,6 +281,7 @@ Directory::Add(char *name, int newSector, bool isDirectory = FALSE, char* path =
                 }
 
 
+
                 FileHeader* fileHdr = new FileHeader();
                 fileHdr->FetchFrom(newSector);
                 fileHdr->setFather(table[meSector].sector);
@@ -258,6 +289,7 @@ Directory::Add(char *name, int newSector, bool isDirectory = FALSE, char* path =
                 fileHdr->WriteBack(newSector);
                 delete fileHdr;
 
+
                 return TRUE;
             }
     	}
@@ -438,7 +470,7 @@ Directory::List(int deep = 0)
             if(table[i].isDirectory)
             {
                 tab(deep);
-                printf("%s/\n", table[i].name);
+                printf("%s/\n", table[i].getName());
                 OpenFile* directoryFile = new OpenFile(table[i].sector);
                 Directory* directory = new Directory(12);
                 directory->FetchFrom(directoryFile);
@@ -449,7 +481,7 @@ Directory::List(int deep = 0)
             else
             {
                 tab(deep);
-    	        printf("%s\n", table[i].name);
+    	        printf("%s\n", table[i].getName());
             }
         }
     }
diff --git a/filesys/directory.h b/filesys/directory.h
index ed36bc1..972e9b5 100644
--- a/filesys/directory.h
+++ b/filesys/directory.h
@@ -35,9 +35,12 @@ class DirectoryEntry {
     bool isDirectory;
     int sector;				// Location on disk to find the 
 					//   FileHeader for this file 
-    char name[FileNameMaxLen + 1];	// Text name for file, with +1 for 
+    int nameIndex;	// Text name for file, with +1 for 
 					// the trailing '\0'
+    int nameSize;
     char* getName(int fatherSector = 0);
+
+    void setName(char* name);
 };
 
 // The following class defines a UNIX-like "directory".  Each entry in
@@ -73,7 +76,7 @@ class Directory {
     void Print();			// Verbose print of the contents
 					//  of the directory -- all the file
 					//  names and their contents.
-    char* FindEntryName(int index){return table[index].name;}
+    char* FindEntryName(int index){return table[index].getName();}
     char* getFileName(int sector);
 
     bool RemoveAll();
diff --git a/filesys/directory.o b/filesys/directory.o
index a4b62fb..3a1ad7d 100644
Binary files a/filesys/directory.o and b/filesys/directory.o differ
diff --git a/filesys/filehdr.o b/filesys/filehdr.o
index 6b0b08b..0733921 100644
Binary files a/filesys/filehdr.o and b/filesys/filehdr.o differ
diff --git a/filesys/filesys.cc b/filesys/filesys.cc
index 93bd9b8..656c03e 100644
--- a/filesys/filesys.cc
+++ b/filesys/filesys.cc
@@ -55,6 +55,7 @@
 // sectors, so that they can be located on boot-up.
 #define FreeMapSector 		0
 #define DirectorySector 	1
+#define FileNameSector      2
 
 // Initial file sizes for the bitmap and directory; until the file system
 // supports extensible files, the directory size sets the maximum number 
@@ -62,6 +63,7 @@
 #define FreeMapFileSize 	(NumSectors / BitsInByte)
 #define NumDirEntries 		12
 #define DirectoryFileSize 	(sizeof(DirectoryEntry) * NumDirEntries)
+#define FileNameFileSize 500
 
 #define MaxOpenFile 100
 
@@ -86,6 +88,7 @@ FileSystem::FileSystem(bool format)
         Directory *directory = new Directory(NumDirEntries);
 	FileHeader *mapHdr = new FileHeader;
 	FileHeader *dirHdr = new FileHeader;
+    FileHeader *filenameHdr = new FileHeader;
 
         DEBUG('f', "Formatting the file system.\n");
 
@@ -93,13 +96,14 @@ FileSystem::FileSystem(bool format)
     // (make sure no one else grabs these!)
 	freeMap->Mark(FreeMapSector);	    
 	freeMap->Mark(DirectorySector);
+    freeMap->Mark(FileNameSector);
 
     // Second, allocate space for the data blocks containing the contents
     // of the directory and bitmap files.  There better be enough space!
 
 	ASSERT(mapHdr->Allocate(freeMap, FreeMapFileSize));
 	ASSERT(dirHdr->Allocate(freeMap, DirectoryFileSize));
-
+    ASSERT(filenameHdr->Allocate(freeMap, FileNameFileSize));
     // Flush the bitmap and directory FileHeaders back to disk
     // We need to do this before we can "Open" the file, since open
     // reads the file header off of disk (and currently the disk has garbage
@@ -108,8 +112,10 @@ FileSystem::FileSystem(bool format)
         DEBUG('f', "Writing headers back to disk.\n");
         mapHdr->setCreateTime();
         dirHdr->setCreateTime();
+        filenameHdr->setCreateTime();
 	mapHdr->WriteBack(FreeMapSector);    
 	dirHdr->WriteBack(DirectorySector);
+    filenameHdr->WriteBack(FileNameSector);
 
     // OK to open the bitmap and directory files now
     // The file system operations assume these two files are left open
@@ -136,6 +142,7 @@ FileSystem::FileSystem(bool format)
 	delete directory; 
 	delete mapHdr; 
 	delete dirHdr;
+    delete filenameHdr;
 	}
     } else {
     // if we are not formatting the disk, just open the files representing
@@ -449,6 +456,13 @@ FileSystem::Print()
     directory->FetchFrom(directoryFile);
     directory->Print();
 
+    
+    FileHeader* filenameHdr = new FileHeader;
+    filenameHdr->FetchFrom(FileNameSector);
+    filenameHdr->Print();
+    delete filenameHdr;
+
+
     delete bitHdr;
     delete dirHdr;
     delete freeMap;
diff --git a/filesys/filesys.o b/filesys/filesys.o
index 4559260..c29ed9c 100644
Binary files a/filesys/filesys.o and b/filesys/filesys.o differ
diff --git a/filesys/fstest.cc b/filesys/fstest.cc
index 6723843..f21c9e7 100644
--- a/filesys/fstest.cc
+++ b/filesys/fstest.cc
@@ -182,6 +182,9 @@ FileRead()
 void
 PerformanceTest()
 {
+    printf("haha\n");
+    bool success = fileSystem->Create("asdsafasdasdas");
+    printf("haha\n");
     /*
     bool success;
 
@@ -204,6 +207,7 @@ PerformanceTest()
     success = fileSystem->Remove("C", "/A/");
     */
 
+    /*
     Thread* t = new Thread("fork");
     if(t->gettid() != -1)
     {
@@ -230,5 +234,6 @@ PerformanceTest()
     stats->Print();
 
     delete openFile;
+    */
 }
 
diff --git a/filesys/fstest.o b/filesys/fstest.o
index b11640d..361b4fc 100644
Binary files a/filesys/fstest.o and b/filesys/fstest.o differ
diff --git a/filesys/nachos b/filesys/nachos
index 6409543..9eeb544 100755
Binary files a/filesys/nachos and b/filesys/nachos differ
diff --git a/filesys/openfile.cc b/filesys/openfile.cc
index 3838050..609b853 100644
--- a/filesys/openfile.cc
+++ b/filesys/openfile.cc
@@ -95,6 +95,7 @@ int
 OpenFile::Write(char *into, int numBytes)
 {
     hdr->addWCount();
+    //printf("write into : %s, %d, seekPosition: %d\n", into, numBytes, seekPosition);
     int result = WriteAt(into, numBytes, seekPosition);
     seekPosition += result;
     return result;
@@ -212,6 +213,7 @@ OpenFile::WriteAt(char *from, int numBytes, int position)
     for (i = firstSector; i <= lastSector; i++)	
         synchDisk->WriteSector(hdr->ByteToSector(i * SectorSize), 
 					&buf[(i - firstSector) * SectorSize]);
+
     hdr->setLastModifyTime();
     delete [] buf;
     return numBytes;
diff --git a/filesys/openfile.o b/filesys/openfile.o
index 12f225f..6de90b3 100644
Binary files a/filesys/openfile.o and b/filesys/openfile.o differ
diff --git a/network/directory.o b/network/directory.o
index 3ec5987..7d014f2 100644
Binary files a/network/directory.o and b/network/directory.o differ
diff --git a/network/filehdr.o b/network/filehdr.o
index e3df49f..1e09e0d 100644
Binary files a/network/filehdr.o and b/network/filehdr.o differ
diff --git a/network/filesys.o b/network/filesys.o
index b588a7b..9c33e46 100644
Binary files a/network/filesys.o and b/network/filesys.o differ
diff --git a/network/fstest.o b/network/fstest.o
index 8ab4992..01c3b06 100644
Binary files a/network/fstest.o and b/network/fstest.o differ
diff --git a/network/nachos b/network/nachos
index 6c2ad09..e39186a 100755
Binary files a/network/nachos and b/network/nachos differ
diff --git a/network/openfile.o b/network/openfile.o
index 0e761d8..6dbdf66 100644
Binary files a/network/openfile.o and b/network/openfile.o differ
diff --git a/userprog/directory.o b/userprog/directory.o
index 2e234ce..d35c692 100644
Binary files a/userprog/directory.o and b/userprog/directory.o differ
diff --git a/userprog/filehdr.o b/userprog/filehdr.o
index 0748be2..db980f0 100644
Binary files a/userprog/filehdr.o and b/userprog/filehdr.o differ
diff --git a/userprog/filesys.o b/userprog/filesys.o
index 844ebfc..2c6df5a 100644
Binary files a/userprog/filesys.o and b/userprog/filesys.o differ
diff --git a/userprog/fstest.o b/userprog/fstest.o
index 2c1cff9..f6e4463 100644
Binary files a/userprog/fstest.o and b/userprog/fstest.o differ
diff --git a/userprog/nachos b/userprog/nachos
index b548517..7a3e831 100755
Binary files a/userprog/nachos and b/userprog/nachos differ
diff --git a/userprog/openfile.o b/userprog/openfile.o
index 7c6f971..36ae9b0 100644
Binary files a/userprog/openfile.o and b/userprog/openfile.o differ
diff --git a/vm/DISK b/vm/DISK
index 5209f3e..a4046fd 100644
Binary files a/vm/DISK and b/vm/DISK differ
diff --git a/vm/directory.o b/vm/directory.o
index a8703a8..599fe36 100644
Binary files a/vm/directory.o and b/vm/directory.o differ
diff --git a/vm/filehdr.o b/vm/filehdr.o
index e4a80c4..21da4ee 100644
Binary files a/vm/filehdr.o and b/vm/filehdr.o differ
diff --git a/vm/filesys.o b/vm/filesys.o
index fb9e495..ae0be44 100644
Binary files a/vm/filesys.o and b/vm/filesys.o differ
diff --git a/vm/fstest.o b/vm/fstest.o
index 871e498..1427143 100644
Binary files a/vm/fstest.o and b/vm/fstest.o differ
diff --git a/vm/nachos b/vm/nachos
index 32fefbc..a765d2a 100755
Binary files a/vm/nachos and b/vm/nachos differ
diff --git a/vm/openfile.o b/vm/openfile.o
index ee25b43..11fe18e 100644
Binary files a/vm/openfile.o and b/vm/openfile.o differ
